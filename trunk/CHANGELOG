Legend
------
+  Addition
-  Removal
*  Alteration/other
!  Alteration/Removal/other that breaks backwards compatibility

LATEST (alpha/beta)
-------------------
+ Added PriorityQueue.Dequeue, which does the same thing as
  PriorityQueue.DequeueMaximum
* Fixed a bug in Fixed64*Fixed64 or Fixed64*double multiplication
  with negative numbers, and also improved its speed
* Fixed a bug in the windowing code that caused the list of updated window
  rectangles to be cleared when the array was grown
* Fixed a similar bug in the audio code that caused the channels array to
  be cleared when the array was resized
* Added dead zones and saturation zones to the joystick code (with the
  ability to set them on a per-axis basis).
* Altered the Input sample to use dead zones and saturation zones to
  eliminate jitter. Also added more joystick output to the input sample
  (it might not fit in the window anymore if you have lots of joysticks)
* Lowered the default audio buffer size (latency) from 100 to 50 milliseconds

2004.05.02 (alpha/beta)
-----------------------
Release stats (only counts code written by me):
Code:  20484 lines,  833493 bytes (60.81%), avg. 41 BPL
Docs:   7359 lines,  537105 bytes (39.19%), avg. 73 BPL
Total: 27843 lines, 1370598 bytes, avg. 49 BPL

Release notes:
This release has a lot more interface changes than I'd have liked, but the
process of documenting the source code reveals problems with the design that
may not have been evident at earlier stages.

* Made Asteroids example use the CD drive better
* Fixed a bug in which OnControlRemoved/OnControlAdded could be fired before
  the control was actually removed from its parent's control array. This was
  almost never a real problem, but it could cause an exception if multiple
  modal windows were opened simultaneously.
* Added the Control.DrawSurface property
* The audio quality in the Audio example was set to low. Made it use the
  default instead.
+ Added a property to FormBase that gets which button was clicked on a form
+ Started a simple color picker dialog
* Made Button control only depress when clicked with the left mouse button
+ Added a property to the ButtonBase control that controlled whether or not
  it would automatically update the Pressed property
+ Added a property to the Button control that controlled whether or not it
  can draw pressed even when the mouse was not over the button
+ Added BorderColor properties to the FormBase and LabelBase controls
+ Added low-level support for OpenGL 1.2 and 1.3
! Removed some overloads of low-level OpenGL functions that are not likely
  to be used
+ Added some more overloads for OpenGL 1.1 functions
* Fixed some bugs in OpenGL.TexImage2D
! Changed some of the overloads for OpenGL.TexImage2D
  (eg, removed the 'target' parameter)
+ Started on a wrapper for a 2D OpenGL texture
+ Added a 2D Rectangle class
* Fixed some bugs in the Polygon class, added some basic intersection code
+ Added 32 and 64 bit fixed-point math classes
* Improved some samples (used GLTexture2D in OpenGL and added better
  exception handling to Asteroids)
* Improved the Vector classes (you can now normalize to a given length)
* Changed the hash code functions for Point and Vector
* Added a ToPoint() method to the Vector classes
! Swapped the first two parameters to Unsafe.Copy
* Fixed Polygon.GetBounds()
* Made sure Line.Intersection(Rectangle) wouldn't loop infinitely (due to
  floating point inaccuracy/imprecision)
* Fixed a bug in the rectangle union code
* Fixed the line-polygon intersection code
- Removed the code to clip a line to the section outside of a polygon
  (for now)
* Used the Surface.ClipRect property to optimize the Windowing drawing code
* Fixed a bug with the way the Checkbox control draws itself
* Made the Input example flip the video surface only when there was nothing
  else to do (using an IdleProcedure)
+ Added a Format property to the VideoInfo class which returns the pixel
  format of the "best" video mode.
* A null PixelFormat can now be passed to Video.GetModes
! Changed Video.GetModes to return an array of Size, rather than Rectangle
! Added an index parameter to Video.UpdateRects(Rectangle[], int)
! Removed the PaletteType parameter from the GetPalette calls
! Removed the Video.GetPalette call
! Made the Video.SetPalette call always set the physical palette
! Removed the current usage of IBlittable
! Changed the name SurfaceFlag.AnyFormat to SurfaceFlag.NoEmulation
+ Added a Surface(Bitmap, SurfaceFlag) constructor
! Removed the Surface constructor that took all the masks inline
! Renamed Surface.HasHWPalette to Surface.HasPhysicalPalette
! Removed the AlphaLevel class (no longer needed now that you've got real
  documentation!)
! Removed Surface.Flip
! Greatly simplified the color key and surface alpha interface/implementation
+ Added code to convert seconds to CD frames and to return the number of
  frames per second
+ Added code to allow playing CDs with real time offsets rather than just
  frames
! Removed the ID property of the Drive (cd-rom drive) class
* Made GameLib and the example programs use the Type property of the event
  class instead of checking the type dynamically.
! Made the type field of the Event class private (it was never supposed to
  be public)
+ Added joystick support to the Input example
+ Added an Offset property to the JoyBallEvent class
* Fixed a bug that can occur when deinitializing joysticks
! The SubType property of the WindowEvent class is now read-only
! Made several WindowEvent-derived classes internal (they shouldn't be
  used in user code)
! Removed the Events.UpdateQueue method and the Events.SyncRoot property.
  They were basically unnecessary.
+ Added a Size property to the ResizeEvent class
! Changed the ExceptionEvent class (new constructor, field name change, ...)
! Changed Events.QueueSize to Events.Count
* Made Events make proper use of multicast delegates for EventProcedure and
  IdleProcedure
! Removed the Font.CenterOff methods
+ Reworked BitmapFont so it can handle variable-width fonts too
! Renamed NonFixedFont to StyledFont, which is a much better name for it
+ Added a method (PixelFormat.IsCompatible) to check whether a pixel format
  is compatible with another (which means that no conversion would be
  necessary between them), and another, related method (Surface.IsCompatible)
+ Added more flexibility to the fonts regarding background color
! Renamed TrueTypeFont.CacheSize to TrueTypeFont.MaxCacheSize
* Improved the implementation of shaded fonts with regards to color
! Made BitmapFont take vertical spacing instead of line skip
! Removed the Keyboard.Press and Keyboard.Release methods
! Made Joystick.Ball report absolute coordinates rather than relative ones
* Fixed bug where joysticks wouldn't query their initial state
* Doubled speed of Unsafe.Copy and Unsafe.Fill using unmanaged code
+ Added Unsafe.SafeCopy
! Renamed Primitives.PutPixel to Primitives.Pixel for consistency
+ Added versions of Primitives.Pixel that take a Point
! Removed Primitives.* methods that accepted uint colors
+ Added versions of Primitives.Polygon and Primitives.Bezier that take a
  number of points to read from the array
* Fixed a bug in IOH.Skip that caused an exception to not be thrown if the
  end of the stream was reached with large (>512 bytes) skip values.
* Changed IOH.Skip so it takes an argument of type long instead of int
* Removed the restriction that when using StreamStream with unseekable
  underlying streams, the underlying stream's Position must equal the start
  of the range given to the constructor
* Removed the restriction that a StreamStream cannot be increased in length
  using StreamStream.SetLength. Now, the length can be increased or reduced
  as long as it wouldn't require seeking an unseekable underlying stream.
* Fixed a bug in StreamStream.Read and StreamStream.ReadByte that allowed
  them to read past the end of the underlying stream
* Fixed a bug in StreamStream.Seek that allow it to seek past the end of the
  underlying stream in one circumstance
+ Added versions of IOH.Read that do not throw an exception when not all data
  could be read
! Reimplemented the PriorityQueue using a heap instead of a binary search
  tree, and made the interface more standard for a priority queue
* Fixed bug in RedBlackTree that caused Maximum() and Minimum() to fail when
  there was only one item in the tree
! Split RedBlackTree into Map and BinaryTree classes. Map replaces the old
  RedBlackTree class, and BinaryTree is a more standard binary search tree
! Renamed PSDCodec.ReadNextLayer to PSDCodec.ReadLayer and
  PSDCodec.ReadRemainingLayers to PSDCodec.ReadLayers
+ Added PSDCodec.SkipLayers which is analogous to PSDCodec.ReadLayers
* Fixed a bug in PSDCodec.IsPSD(Stream) that caused it to not reset the
  position of the stream if the file was a PSD file using a version of the
  PSD format that greater than the highest version understood by the codec
* Made the Map and BinaryTree classes iterate in sorted order (infix) rather
  than prefix order
+ Added a Timing.Reset method to allow the timer to be reset
! Moved static math functions for the fixed point classes into GLMath so
  that Abs, Ceiling, etc could be properties instead of methods and for
  greater consistency with how it's done for the .NET standard library
* Fixed a bug in the ToDouble method of the fixed-point classes
* Fixed some fixed-point mathematical constants (whoops!)
* Further optimized many fixed-point math functions
! Changed math classes to use double instead of float
+ Added TrueTypeFont.CopyAlpha, which causes the font to store alpha
  information instead of blending
! Removed vector/vector multiplication and division. These operations are not
  generally useful and may be confusing
* Optimized BitmapFont for the case that the charset is contiguous
+ Added Line.LineIntersection
! Removed Line.FromPoints(Point, Point), since there's already a constructor
  to do that
! Renamed Polygon.SplitIntoConvexPolygons to Polygon.Split
! Moved Polygon.ConvexIntersects to Line.ConvexSegmentIntersects and
  Rectangle.ConvexIntersects (and fixed a bug there)
+ Added Rectangle.GetPoint
! Removed the Vector.Rotate(xa, ya, za) form and replaced it with something
  much more useful -- Vector.Rotate(Vector, angle) [rotation around an
  arbitrary vector]
+ Added .Equals(object obj, double epsilon) to most math objects
+ Added Point.ToPointF
+ Added a LOT more documentation (for CD.cs, Config.cs, Events.cs,
  Exceptions.cs, Fonts.cs, GraphicsPrimitives.cs, Input.cs, Interop.cs,
  IO.cs, LinkedList.cs, Math.cs, OpenGL.cs, OpenGLInterop.cs,
  PriorityQueue.cs, PSD.cs, RedBlackTree.cs, Surface.cs, and Video.cs).
* A couple bugfixes and additions I forgot to add to the changelog

2004.02.07 (alpha/beta)
-----------------------
Release stats (only counts code written by me):
Code:  18456 lines,  756053 bytes (88.84%), avg. 41 BPL
Docs:   1247 lines,   94974 bytes (11.16%), avg. 76 BPL
Total: 19703 lines,  851027 bytes, avg. 43 BPL

Release notes:
* First public release
