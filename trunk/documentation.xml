<?xml version="1.0" encoding="utf-8" ?> 
<GameLib>
 <IO>
  <StreamStream> <!-- StreamStream class -->
   <StreamStream>
    <summary>Initializes this stream.</summary>
    <param name="start">The starting offset into <paramref name="stream"/> where this stream will begin.</param>
    <param name="length">The length of this stream.</param>
    <remarks>When using seekable streams, the StreamStream's <see cref="Position"/> property will always begin
    at the beginning of the range given to the constructor. With unseekable streams, however, this may not be
    possible. If the underlying stream's <see cref="Stream.Position"/> is before <paramref name="start"/>, it will
    be advanced forward to <paramref name="start"/>. If it's after <paramref name="start"/> but still within the
    range, then the StreamStream's <see cref="Position"/> property will set to the offset from
    <paramref name="start"/>. If the underlying stream's <see cref="Stream.Position"/> is past the end of the range
    (greater than <see cref="start"/> plus <see cref="length"/>) then an exception will be thrown because the
    StreamStream cannot possibly be in a valid state. Similarly, since shared streams are seeked to the expected
    position before each operation, unseekable streams cannot be shared.
    </remarks>
   </StreamStream>
  </StreamStream>

  <IOH>
   <BinaryFormat> <!-- BinaryFormat codes -->
    <remarks>
     <para>The binary formatters allow you to format binary data in a way analogous to using
      <see cref="Console.Write"/> or <see cref="String.Format"/> to format text. The following format codes are
      recognized, and examples are given below. 
     </para>
<code>
Code  Writes/Effect           Parameter
----------------------------------------
x     Zero bytes              NONE
b     Signed bytes            Array/Vals
B     Unsigned bytes          Array/Vals
w     Signed words            Array/Vals
W     Unsigned words          Array/Vals
d     Signed doublewords      Array/Vals
D     Unsigned doublewords    Array/Vals
q     Signed quadwords        Array/Vals
Q     Unsigned quadwords      Array/Vals
f     Floats                  Array/Vals
F     Doubles                 Array/Vals
c     Characters              Array/Vals
s     A string                String
p     A pascal string         String
A     Sets ASCII mode         NONE
U     Sets Unicode mode       NONE
&lt;     Sets little-endian mode NONE
&gt;     Sets big-endian mode    NONE
=     Sets default endianness NONE
</code>
     <para>Whitespace between tokens in the format string is ignored, so you can use whitespace to make the format
      string more readable. However, whitespace between a prefix and its associated format code is not allowed
      (this restriction may be relaxed in the future).
     </para>
     <para>The <c>x</c> code and all codes that take parameters also take an optional prefix. A prefix is a positive
      integer or a question mark added before the code to specify a count of items. If not specified, the prefix
      defaults to 1 (except for string codes <c>s</c> and <c>p</c>, where it defaults to the length of the string).
      If the prefix is a question mark, an array or string is expected (depending on the code chosen), and the prefix
      is set to the length of the array or string.
     </para>
     <para>The <c>p</c> code specifies a pascal string, which has the length of the string stored in the byte before
      the string itself. Because only one byte is allocated for the length, pascal strings are limited to 255
      characters in length. Without a prefix (or a prefix of '?'), if a string is passed that is longer than that, it
      will be silently truncated to 255 characters. If a prefix greater than 255 is specified for a pascal string, an
      error will occur.
     </para>
     <para>If a prefix is passed for a string code (<c>s</c> or <c>p</c>) and the prefix is longer than the string
      parameter, the remaining characters will be written as NILs (value of zero) to reach the length given in the
      prefix.
     </para>
     <para>Codes that take Array/Vals as a parameter either take an array of the specified type or a list of
      values convertible to that type (using the <see cref="System.Convert"/> class). For instance, the 'w' code
      takes either an array of signed words or a literal list of values convertible to signed words, with a number
      of values equal to the prefix. You may be surprised by the semantics of the <see cref="System.Convert"/> class,
      however, so see its documentation to see how it converts values.
     </para>
     <para>The codes that write words, doublewords, and quadwords are affected by the endianness mode. Unicode
      characters and strings are also affected. The default endianness is set to the default for the system the code
      is running on. It can be changed with the <c>&lt;</c>, <c>&gt;</c>, and <c>=</c> codes. The endianness mode
      can be changed in the middle of the format string if you want to write some data using one endianness
      mode and some other data with another mode.
     </para>
     <para>The <c>s</c>, <c>p</c>, and <c>c</c> codes are affected by the character mode. By default, the character
      mode is ASCII, but it can be changed with the <c>A</c> and <c>U</c> codes. If the character mode is ASCII,
      characters will be written out as single bytes and strings will be converted to ASCII before being written.
      Otherwise, if the character mode is set to Unicode, strings will not be encoded before being written and
      characters will be written using two bytes each with the order determined by the current endianness mode.
      The character mode can be changed in the middle of the format string if you want to write some data using
      one character mode and some other data with another mode.
     </para>
     <para>Because the <see cref="CalculateSize"/> and formatted <see cref="Write"/> functions accept a variable
      length parameter array, you can also pass a single array of <see cref="System.Object"/> that contains all
      the parameters.
     </para>
     <example>
      <para>See the following examples:</para>
<code>
// A simple example that first writes an array's length, and then writes the
// contents of the array (of Int32), using default endianness:
IOH.Write(stream, "d?d", Array.Length, Array);

// Codes taking Array/Vals accept both arrays and value lists. For instance:
short[] arr = new short[] { 1, 2, 4, 8 };
IOH.Write(stream, "4w", arr);        // writes eight bytes
IOH.Write(stream, "4w", 1, 2, 4, 8); // writes the same eight bytes

// An example taken from some .PSD writing code to begin the header. It
// writes the signature (8BPS) as ASCII, the version byte (1), six padding
// bytes, the number of channels (a word), the dimensions of the image (two
// integers), and two words specifying the bit depth per channel (8) and
// color mode (3 = RGB), using big-endian output.
// It uses whitespace to make the string a bit more readable.
IOH.Write(stream, "&gt;s B 6x w 2d 2w", "8BPS", 1, image.Channels,
          image.Height, image.Width, 8, 3);

// This is illegal because whitespace between a prefix and its associated
// format code is currently not allowed. This restriction may be relaxed
// in the future.
IOH.Write(stream, "6 x"); // BUG: no space allowed between prefix and code

// This example uses IOH.CalculateSize() and IOH.Write() in part of a
// network serialization implementation. It writes the player's name as
// a pascal string, the player's position, the length of a byte array,
// and the byte array itself, using big-endian output.
public int SizeOf()
{ return IOH.CalculateSize("&gt;p3d?B", player.Name, byteArray);
}
public void SerializeTo(byte[] buf, int index)
{ IOH.Write(buf, index, "&gt;p3d?B", player.Name, player.X, player.Y,
            byteArray.Length, byteArray);
}

// You can also pack all the parameters into a single object array, possibly
// with the parameter array and/or format string built dynamically.
object[] parms = new object[] { 1, 2.4f, stringVar, intArray };
byte[] output = IOH.Write("dfp?d", parms);
</code>
     </example>
    </remarks>
   </BinaryFormat>
  </IOH>
 </IO>
 
 <Mathematics>
  <GLMath>
   <AngleBetween>
    <summary>This method returns the angle between two points.</summary>
    <param name="start">The first point.</param>
    <param name="end">The second point.</param>
    <returns>Returns the angle between <paramref name="start"/> and <paramref name="end"/>, in radians.
    A return value of 0.0 indicates that the second point is to the right of the first point.
    </returns>
   </AngleBetween>
  </GLMath>
 </Mathematics>
 <Video>
  <PSDCodec>
   <IsPSD>
    <summary>Determines whether a file is a PSD image file that can be read by this codec.</summary>
    <returns>Returns true if the file looks like it contains PSD image data and false otherwise.</returns>
    <remarks>This function does not read all the data from the PSD image file to determine whether it could be
    loaded successfully and doesn't use any unsupported features. It only checks to see whether the image file has
    the right header signature and version number for the PSD format the codec can understand.
    </remarks>
   </IsPSD>
   <LayerReading>
    <exception cref="InvalidOperationException">
    Thrown if
    <para>The codec is not in a reading mode.</para>
    -or-
    <para>All layers have been read already.</para>
    </exception>
   </LayerReading>
   <Read>
    <summary>Reads a PSD image from the given file.</summary>
    <returns>A <see cref="PSDImage"/> containing the flattened image and all the layers.</returns>
    <include file="documentation.xml" path="//Video/PSDCodec/Reading_X/*"/>
   </Read>
   <ReadComposite>
    <summary>Reads the flattened image from a PSD file.</summary>
    <returns>A <see cref="Surface"/> containing the flattened image from the PSD file.</returns>
    <include file="documentation.xml" path="//Video/PSDCodec/Reading_X/*"/>
   </ReadComposite>
   <Reading_X>
    <exception cref="ArgumentException">Thrown if the file does not contain a valid PSD image.</exception>
    <exception cref="NotSupportedException">Thrown if the PSD image uses unsupported features.</exception>
    <exception cref="InvalidOperationException">Thrown if the codec is currently in a reading or writing mode.</exception>
   </Reading_X>
   <StartReading>
    <summary>Starts reading a PSD image.</summary>
    <returns>The <see cref="PSDImage"/> object in which data for this file will be stored. All fields except
    <see cref="Surface"/> fields will be populated.
    </returns>
    <include file="documentation.xml" path="//Video/PSDCodec/Reading_X/*"/>
   </StartReading>
   <StartWriting>
    <summary>Starts writing a PSD image.</summary>
    <param name="image">A <see cref="PSDImage"/> object with all fields populated, including layer information,
    except <see cref="Surface"/> fields, which are not required.
    </param>
    <remarks>All data in <paramref name="image"/> is written into the PSD header and is expected to remain the
    same throughout the writing process.
    </remarks>
    <include file="documentation.xml" path="//Video/PSDCodec/Writing_X/*"/>
   </StartWriting>
   <Write>
    <summary>Writes a PSD image.</summary>
    <param name="image">A <see cref="PSDImage"/> object with all fields populated, including layer information
    and image data (<see cref="Surface"/> fields).
    </param>
    <include file="documentation.xml" path="//Video/PSDCodec/Writing_X/*"/>
   </Write>
   <Write_Surface>
    <summary>Writes a PSD image.</summary>
    <param name="surface">A <see cref="Surface"/> which will be used as the flattened image in the PSD file.</param>
    <remarks>The resulting PSD image will have no layers.</remarks>
    <exception cref="ArgumentNullException">Thrown if <paramref name="surface"/> or <paramref name="stream"/> is
    null.
    </exception>
    <exception cref="InvalidOperationException">Thrown if the codec is currently in a reading or writing mode.</exception>
   </Write_Surface>
   <Writing_X>
    <exception cref="ArgumentNullException">Thrown if <paramref name="image"/> or <paramref name="stream"/> is
    null.
    </exception>
    <exception cref="ArgumentException">Thrown if <paramref name="image"/> contains invalid data.</exception>
    <exception cref="InvalidOperationException">Thrown if the codec is currently in a reading or writing mode.</exception>
   </Writing_X>   
  </PSDCodec>
 </Video>
</GameLib>